    Vue Cll筆記:
        Q.為甚麼要使用Vue Cli?Cli又是甚麼?
        A.Cli是一個整合性工具，用於套件管理等等的。
          使用cli的原因是因為現在前端開發編譯越加複雜，例如套件越多。
          若每建立一個html檔案就安裝一次套件，建立一次環境，那是十分耗時的一件事情。
          於是cli就因應而生。

        Q.Cli介紹
        A.Cli是基於webpack所建置的開發工具。我們可以將各類的檔案往cli內丟，cli將這些檔案編譯並產生相應的html css js的檔案


    正文開始:
        一.環境安裝
            共分為以下四個步驟。
            1.安裝node.js
            2.安裝vueCli
            3.建立Vue專案
            4.開始開發


            安裝node.js:
                先至node.js的官網下載
                連結:https://nodejs.org/en/

                1.下載後直接進行安裝，基本上直接按下一步即可。
                2.接著開啟命令提示字元輸入node - v 查看版本 確認安裝成功
                3.接著開啟命令提示字元輸入npm - v 查看版本 確認安裝成功
                //通常在安裝node.js時就會一併安裝npm了。
            
            安裝vueCli:

                1.開啟終端機 or 命令提示字元輸入 npm install -g @vue/cli 就會自動安裝
                2.輸入 vue -V 來確認cli是否安裝完成//注意這邊是大寫
                3.使用 cd /d 指定路徑 進入到指定資料夾建立project

            以下是基本的指令:
                通用指令 (Mac, Windows 共用)
                Nodejs 版本
                    node -v

                npm 版本
                    npm -v

                Windows 指令
                回到資料夾頂端
                    cd\\

                回到上一層
                    cd..

                進入資料夾路徑
                    cd /d 指定路徑

                中斷目前操作
                    ctrl + c

                Mac OS 指令
                回到資料夾頂端
                    cd \\

                回到上一層
                    cd ..

                進入資料夾路徑

                    cd {‌{ 資料夾路徑 }}

                中斷目前操作

                    ctrl + c

            創建Vue專案:
                1.使用vue create 指定資料夾名稱 //不需要事先建立資料夾，直接在此輸入就會自動新建
                2.此時會跑出選項要你選擇你要安裝的套件及版本 這邊我們先使用自行加入 manually select features
                //若有按錯或想終止動作 可以按下ctrl + C
                //使用空白健來選擇項目
                這邊建議安裝:
                    css - processors 為CSS預處理器
                    liter / fornatter 程式碼品質檢測
                3.按下enter以後會到vue版本選擇 之後會進行一系列的選擇

                4.當安裝完成以後，使用vscode開啟利用快捷鍵 ctrl + 反引號(`)開啟終端機
                5.輸入npm run serve 就可以把環境給運行起來

                備註:輸入完成以後會跳出兩個路徑
                local為本地端可看見
                Netword則是區網可見

            介紹npm創建的檔案:
                readme:介紹指令等的檔案
                package.json:此專案的配置，包含安裝了那些相關套件 //基本不會動到
                package-lock.json:安裝套件版本及描述 //基本上不會動到
                babel.config.js:babel相關設定 //基本上不會動到
                editorconfig:編輯器的設定檔
                browserslistrc:瀏覽器支援相關
                src(folder):{
                    main.js:載入套件、全域的設定檔、路由等。基本上所有檔案及設定都會串到main.js。被稱做進入點,
                    assets(folder):放入scss或圖片等的資料夾
                }
                public(folder):跟進入點沒有相關聯的檔案，或不需要編譯的檔案、比較大的圖片等。除了index.html會被編譯。
                node_modules(folder):運行資料夾所需要的延伸套件，根據package.json所安裝的套件


        在專案中引入scss,sass:
        步驟：
            1.在cli創建專案時需選擇CSS Pre-processors 使用 CSS 預處理器
            2.於assets資料夾下創建sass的folder並新增scss檔
            3.使用@import導入指定位置 or 頁面 or Component
                導入的位置會帶來不同的效果
                -.Component：導入component的話就只會在component內生效
                -.app.vue:與component是差不多的,只是通常放在這邊的scss都運用於全局,所以不會使用scoped,但須注意的是這邊共享的是css而非scss(也就是說沒有辦法使用變數)
                        舉個例子,假設在scss我們設定了 h1 {color:#000}
                        但在app.vue設定為
                        <style lang="scss">
                        @import "@/assets/scss/main.scss"
                            h1{
                                color:#fff;
                            }
                        </style>
                        在不考慮權重的情況下,其他專案的顏色會是#fff而非＃000
                -.main.js:與app.vue差不多一樣,但是為編譯後的css而非全局導入scss,另外的差別在於導入的方式不同。
                          導入的位置需要在所有import後,Vue.create之前。

                          import vue form "vue";
                          import "./assets/scss/main.scss"
                          Vue.createApp({})

            ex.scoped屬性是為了避免父層污染到子層的css

        建立元件：
            在cli建立元件與原先的版本不同。
            建立元件的方式是在src底下的component資料夾建立.vue的檔案((一般.vue檔案的名稱第一個字都會為大寫
            範例:
            假設我們已經在component創立一個.vue的檔案
            <template>
                <div>
                    {{text}}
                </div>
            </template>
            //這邊注意，就算.vue內只有template也是可以運行的喔

            import Component from '@/components/Component.vue';
            //這邊的＠為src的縮寫

            export default{
                components:{
                    Component,
                },
                data(){
                    return{
                        text:'測試文字'
                    }
                }
            }

            //這邊撰寫與原先的component差別不大，基本上可以理解為.vue就是一個compoenet
            //template標籤就是原先的template屬p性。
            //export default為整個元件的結構
            //import則是將元件給導入到目前的.vue檔案中,接著再使用components屬性加入到component中

            ex.view資料夾是放置獨立頁面


        ESlint 及 vueCli的撰寫風格
        因為lint的關係,所以會有一些龜毛的報錯以提升你程式碼品質,若已經沒有問題卻還是報錯可以使用
        npm run lint -- --fix 來使系統自主修正錯誤
        但多數的錯誤還是因為撰寫的樣式不符合vue的關係。
        例如很常見的一點就是命名風格。vue為了不讓component與標籤有衝突,所以命名這塊都偏向於多個單詞組合而成。
        像是：TestCard, BigFont等等諸如此類

        
        導入外部套件：
        1.首先需要到要載入的套件取得npm安裝代碼
            拿sweet alert2來舉例 npm install sweetalert2
            在vscode終端機中直接輸入代碼即可。
        2.