本章節進入原型鍊
何謂原型?原型鍊又是甚麼?


原型:
原型硬要解說的話，大概就是包裹物件。
我們可以使用consolo.log查詢原型
裡面有一個__proto__或是Prototype，
旁邊的話有顯示一些文字，假如你查詢的是陣列，那麼就會顯示Array，這便是原型。

接著我們點開來看，裡面有許許多多的屬性，例如forEach等，
這就是原型附加的功能，也被稱為包裹物件。(待釐清)

補充:陣列本身也是物件的一種，我們在選擇物件內容時會使用[]來指定陣列內容，
而[]內填入的詞就是索引位置。

原型鍊:
了解原型是甚麼以後，我們開始了解原型鍊。
在提原型鍊以前我們要先了解原型本身是無法直接執行的，它需要有個載體。
甚麼意思?讓我們用以下範例來解說:

var a = ['A','B','C'];

console.log(a.length)//顯示3

從上面範例可以知道我們使用了length來查詢陣列內容物的數量，
length就是原型的功能之一，而a就是length這個原型功能的載體。
也就是說，原型及本身的功能已經存在，但需要一個載體來運用它的功能，
若單純只有原型，雖然功能存在，但是無法執行。
Ex.原型是共用的，也就是說假設在a陣列原型新增了一個附加功能，
那麼後續新增b、c陣列內也會有新增的功能

接下來進入重點，原型鍊。
前有的補充有說到，陣列其實是一種物件，那它的原型就是物件。
除了陣列本身的功能外，它向上查找物件物件的功能並使用，而這種原型繼承原型的方法被稱為原型鍊。

上述總結:

ol.原型有不斷向上查找的特性
ol.一樣具有物件的特性
ol.原型可共用方法與屬性


使用建構式定義自己的原型:

以範例做說明:

一.建立function 作為原型使用.

function person(name,hair){
    this.name = name;
    this.hair = hair;
}

二.新增屬性(功能)

person.prototype.自訂義名稱 = function(){}

三.new 建構

var ming = new person('小明','短髮')
var ming2 = new person('小明2','短髮2')//可有多個載體


以上三步驟執行便可使用。

ming.自訂義名稱()


補充:prototype及__proto__差別

__proto__ 是在物件上。它是連結原型的屬性

prototype 是在函式上。//建議用此方法。因為用以上方法可能會出現BUG